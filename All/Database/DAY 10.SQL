			
								DAY 10
								
								PLSQL
					PROCEDURE, FUNCTION, TRIGGERS
					
	================================================================
	
		Areas Covered : 
					PROCEDURES
					FUNCTIONS 
					
					RECURSVICE PROCEDURES
					CALLING PROCEDURES FROM FUNCTION 
					
	=================================================================
	
	TRIGGERS : 
	
			* SET OF CODE WRITTEN IN THE BLOCK 
			* BUT TRIGGERS ARE EVENT DRIVEN 
			
				* SET OF LINES NEED TO BE EXECUTED WHEN CERTAIN ACTION TAKEN 
				
				TRIGGERING EVENTS :
				
							INSERT / UPDATE / DELETE 
									AS AN TRANSACTION
									
							BASED ON THESE EVENT CERTAIN BLOCK EXECUTED AUTOMATICALLY 
							
							YOU DO NOT HAVE TO DO ANYTHING MANUAL ...
								AUTO TRIGGERED BLOCKS BASED ON EVENTS 
								
								
			----- MOST OF THE TIME 

				TRIGGERS : 
					TO MAINTAIN LOGS 
						
					N NUMBER OF USERS WHO ARE INTERACTING TO THE DATABASE 
					
					WE NEED TO KEEP A TRACT WHICH USER AT WHAT TIME DO THE MODIFICATION IN THE SYSTEM 
					OR WHAT MODIFICATION THEY DID ......
								
								
	SYSTAX : 
			
				CREATE TRIGGERS TRIGGERNAME
						BEFORE / AFTER 
							INSERT / UPDATE / DELETE 
									ON TABLENAME
										FOR EACH ROW 
				BEGIN
				
				BODY OF THE TRIGGER 
				
				END //
				
		LET EXPLORE THE SYNTAX: 
		
		 ** BEFORE / AFTER :-
						EITHER TRIGGER BODY EXECUTED BEFORE EXECUTING THE COMMAND 
						OR 
						TRIGGER BODY EXECUTED AFTER EXECUTION OF THE COMMAND 
						
						
			ACTION  : INSERT STATEMENT 
					  UPDATE STATEMENT 
					  DELETE STATEMENT
					  
	*** IF WE WRITE A TRIGGER WITH 
	
	BEFORE INSERT  : 
				EXECUTE THE TRIGGER BODY BEFORE EXECUTION OF THE INSERT COMMAND 
				
		**INSERT INTO EMPLOYEES VALUES(101,'RAKESH',30000);

		ONE TRIGGER 
		**BEGIN
		  RAHUL 
		
		  END;
		
		WHEN YOU EXECUTE LINE NO NUMBER 77 
		
				IF THE TRIGGER IS BEFORE 
				
					THEN BEFORE INSERTING THE RECORDS IN THE EMPLOYEES TABLE 
					
					SYSTEM WILL EXECUTE LINE NUMBER 80
		
		
		** FIRST TRIGGER BODY EXECUTED AND THEN ACTION COMMAND GET EXECUTED 
		** FIRST ACTION COMMAND GET EXECUTED AND THEN TRIGGER BODY GET EXECUTED 
		
		YOUR COMPLETE ACTION COMMANDS AT THE RUN TIME CONTAINS TWO SET OF VALUES 
		
			1) OLD VALUE 
			2) NEW VALUE 
			
		CONSIDER : 
			INSERT INTO EMPLOYEES VALUES(101,'RAKESH',30000);
				
					EMPID		EMPNAME		SALARY 
			OLD 	NULL		NULL		NULL
			NEW 	101			RAKESH 		30000 
			
		**
			UPDATE EMPLOYEES SET SALARY = 40000 WHERE EMPID= 101;
			
					EMPID		EMPNAME		SALARY 
			OLD		101			RAKESH		30000
			NEW		101			RAKESH		40000
			
		** 
			DELETE FROM EMPLOYEES WHERE EMPID = 101;
			
			
					EMPID		EMPNAME		SALARY 
			OLD 	101			RAKESH		40000
			NEW 	NULL		NULL		NULL
			
			TWO OBJECT :
					OLD / NEW 
						USE THEM : 
							OLD.EMPID, OLD.EMPNAME , OLD.SALARY 
							NEW.EMPID, NEW.EMPNAME, NEW.SALARY 
							
							
	***********
		FOR EACH ROW : 
					DURING UPDATE 
						THERE MAY BE A CASES WHEN IT IMPACT MULTIPLE ROWS 
						
				UPDATE EMPOYEES SET SALARY = SALARY * 1.15 
					WHERE DEPARTMENT_ID = 20;
				
				WE HAVE MULTIPLE EMPLOYEES BELONGS TO DEPARTMENT 20 
							
		** HAVE TO EXECUTE THE TRIGGER BODY FOR EACH ROW UPDATION 

			DELETE FROM EMPLOYEES WHERE DEPARTMENT_ID = 80;
							
							
	**********************************************************

DAC20 : EXAMPLE FOR WRITING A TRIGGER FOR INSERTION A VALUES IN THE EMPLOYEES TABLE AND MAINTAING THE LOGS FOR THE INSERTION 

		CREATE TABLE EMPDAC21
		(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		NAME VARCHAR(200),
		SALARY INT,
		COMM_PCT FLOAT(2,1)
		);
		
		CREATE TABLE EMPDAC21LOGS
		(
		ID INT PRIMARY KEY AUTO_INCREMENT,
		SUBJECT VARCHAR(200),
		DESCRIPTION VARCHAR(200),
		ADDEDDATE DATETIME DEFAULT NOW(),
		ADDEDBY VARCHAR(100)
		);
		
		TRIGGER : 
		
		DELIMITER //
		
		CREATE TRIGGER EMPDAC21_TRIG
			AFTER 
				INSERT ON EMPDAC21
					FOR EACH ROW
		BEGIN 
		
		INSERT INTO EMPDAC21LOGS(SUBJECT,DESCRIPTION,ADDEDBY) 
				VALUES('INSERT','NEW VALUES ENTERED IN THE EMPDAC21 TABLE',USER());
			
		END //
		
		DELIMITER ;
							
							
----- UPDATE EMPLOYEE TABLE 

			
		DELIMITER //
		
		CREATE TRIGGER EMPDAC21_TRIG_UPDATE
			BEFORE 
				UPDATE ON EMPDAC21
					FOR EACH ROW
		BEGIN 
		
		DECLARE STR1 VARCHAR(200);
		
		SET STR1 = CONCAT('OLD SALARY : ',OLD.SALARY,' NEW SALARY : ',NEW.SALARY);

		INSERT INTO EMPDAC21LOGS(SUBJECT,DESCRIPTION,ADDEDBY) 
				VALUES('UPDATE',STR1,USER());
			
		END //
		
		DELIMITER ;	
			
--------------------------------------------------------------------

TAKE ONE EXAMPLE : 
		
		REQUIRENMENT : 
			WHILE A INSERTING A NEW RECORDS 
				SYSTEM CAN VALIDATE THE SALARY SLAB 
					BASED ON THE SALARY SLAB THE COMMISSION GET DECIDED BY THE SYSTEM 
			
			SALARY > 20000 THEN 
				COMMISSION 4.5
				
			SALARY <= 20000 THEN 
				COMMISSION 2.2
				
		DELIMITER //

		DROP TRIGGER IF EXISTS EMPDAC21_TRIG //
		
		CREATE TRIGGER EMPDAC21_TRIG
			AFTER 
				INSERT ON EMPDAC21
					FOR EACH ROW
		BEGIN
		
			IF NEW.SALARY > 20000 THEN 
				UPDATE EMPDAC21 SET COMM_PCT = 4.5 
						WHERE ID = NEW.ID;
			ELSE 
				UPDATE EMPDAC21 SET COMM_PCT = 2.2 
						WHERE ID = NEW.ID;
			END IF;

			INSERT INTO EMPDAC21LOGS(SUBJECT,DESCRIPTION,ADDEDBY) 
				VALUES('INSERT','NEW VALUES ENTERED IN THE EMPDAC21 TABLE',USER());
			
		END //
			
		DELIMITER ;
			
mysql> INSERT INTO EMPDAC21 VALUES(104,'KRISHAN',50600,1.1);
ERROR 1442 (HY000): Can't update table 'empdac21' in stored function/trigger because it is already used by statement which invoked this stored function/trigger.			
	
----------- MODIFY TO ACHIVE THE REQUIREMENTS ------------------

	
		DELIMITER //

		DROP TRIGGER IF EXISTS EMPDAC21_TRIG //
		
		CREATE TRIGGER EMPDAC21_TRIG
			BEFORE 
				INSERT ON EMPDAC21
					FOR EACH ROW
		BEGIN
		
			IF NEW.SALARY > 20000 THEN 
				SET NEW.COMM_PCT = 4.5;
			ELSE 
				SET NEW.COMM_PCT = 4.5;
			END IF;

			INSERT INTO EMPDAC21LOGS(SUBJECT,DESCRIPTION,ADDEDBY) 
				VALUES('INSERT','NEW VALUES ENTERED IN THE EMPDAC21 TABLE',USER());
			
		END //
			
		DELIMITER ;		
				
		EXECUTION PLAN :- 
			1) INSERT INTO EMPDAC21 VALUES(104,'KRISHAN',50600,1.1);
			
			2) SYSTEM WILL CHECK FOR ANY TRIGGERS IF YES 
			
			3) 
					ID		NAME		SALARY 	COMM_PCT
			OLD 	NULL	NULL		NULL	NULL
			NEW 	104		KRISHAN		50600	1.1 
			
			
			4) CHECK FOR AFTER AND BEFORE IF THIS IS BEFORE
				THEN TRIGGER THE TRIGGER BODY FIRST 
				
				IF NEW.SALARY > 20000 THEN 
				SET NEW.COMM_PCT = 4.5;
				ELSE 
				SET NEW.COMM_PCT = 2.2;
				END IF;

				INSERT INTO EMPDAC21LOGS(SUBJECT,DESCRIPTION,ADDEDBY) 
				VALUES('INSERT','NEW VALUES ENTERED IN THE EMPDAC21 TABLE',USER());
			
					ID		NAME		SALARY 	COMM_PCT
			OLD 	NULL	NULL		NULL	NULL
			NEW 	104		KRISHAN		50600	4.5 
			
	==============================================================			
PICK SOME EXAMPLE FOR PLSQL : 

	2) PREPARE A PROGRAM WHICH CAN PERFORM FOLLOWING OPERATION
		- LOOKOUT FOR TABLES WHICH HAS MISSING CONSTRINTS 
		- DISPLAY LIST OF THOSE TABLE  
		
		
		NOTES : 
			1) PROCEDURE 
			2) 
				2.1) ALL THE TABLES WHICH ARE THE PART OF THE DATABASE 
				2.2) ALL THE TABLES WHICH HAS THE CONSTRAINTS TO IT 
				2.3) WE HAVE TO COMPARE 2.1 WITH 2.2 TO FIND THE MISSING CONSTRINT TABLES 
				
			3) PRINT THOSE TABLES 
			
			INFORMATION_SCHEMA 
			
				TABLES : 
						CONTAINS ALL THE TABLES 
				SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'humanresource12';
						
				TABLES WITH CONSTRAINTS : 

				SELECT DISTINCT TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = 'humanresource12';
			
			
		DELIMITER //

		DROP PROCEDURE IF EXISTS DAC20 //
		
		CREATE PROCEDURE DAC20()
		BEGIN 
		
		DECLARE STR1,STR2,STR3 VARCHAR(200);
		DECLARE X,Y,Z INT DEFAULT 0;
		
		DECLARE HRDATABASE_TABLE CURSOR 
				FOR SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'humanresource12';
		
		DECLARE HRDATABASE_TABLE_CONST CURSOR 
				FOR SELECT DISTINCT TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = 'humanresource12';
		
		SELECT COUNT(*) INTO X FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'humanresource12';
		
		SELECT COUNT(*) INTO Y FROM (SELECT DISTINCT TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA = 'humanresource12') T;
		
		CREATE TEMPORARY TABLE EMP_TE(NAME VARCHAR(200));
		
		OPEN HRDATABASE_TABLE;
		
		L_LEVEL : LOOP
			
				IF X <=0 THEN 
					LEAVE L_LEVEL;
				END IF;
				
				FETCH HRDATABASE_TABLE INTO STR1;
				
				OPEN HRDATABASE_TABLE_CONST;
					
				L_CONLEVEL : LOOP 
					
					IF Y <=0 THEN 
						LEAVE L_CONLEVEL;
					END IF;
					
					FETCH HRDATABASE_TABLE_CONST INTO STR2;
					
					IF STR1 = STR2 THEN 
						SET Z = 1;
					END IF; 
					
					SET Y = Y - 1;
					
				END LOOP L_CONLEVEL;
				
				IF Z = 0 THEN 
					INSERT INTO EMP_TE VALUES(STR1);
				END IF;
					
				SET Z = 0;
				SET X = X - 1;
				CLOSE HRDATABASE_TABLE_CONST;
		END LOOP L_LEVEL;
		CLOSE HRDATABASE_TABLE;
		
		SELECT * FROM EMP_TE;
		
		END //
		
		DELIMITER ;
			
	================================================================

	
				
						
				
				
				
				
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	