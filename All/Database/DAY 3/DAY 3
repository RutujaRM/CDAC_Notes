				
							DAY 3 
							
REVISION : 
		
			DDL : DATA DEFINATION LANGUAGE 
					STRUCTURE 
					
					CREATE / ALTER / DROP 
					WHICH ONLY WORKS ON TABLE STRUCTURES
			
			CREATE : 
				HOW TO CREATE DATABASE
				HOW TO CREATE TABLES 
				HOW TO DEFINE THE TABLES 
					WITH COLUMNS AND COLUMN DATATYPE 
				WHAT ARE ALL DATATYPE 
					NUMERIC
					STRING
					DATE 
				TABLES WITH THE COMBINATION OF ALL ABOVE 
				PROVIDING RESTRICTION TO THE END USER FOR ENTERING DATA IN THE TABLE 
				
				CONSTRAINTS : 
						PRIMARY KEY 
						UNIQUE
						NOT NULL 
						
------------------------------------------------------------------------

4) FOREIGN KEY :-

			1) TWO TABLES NEED TO BE IN A RELATIONSHIP 
			2) THESE TABLES MUST BE TREATED AS PARENT AND CHILD 
			
			CONSIDERING THERE ARE TWO TABLES 
				EMPLOYEES :
					ALL DATA RELATED TO EMPLOYEES 
				
						DEPARTMENT
							ALL DATA RELATED TO DEPARTMENT 
						
				EMPLOYEE 
					EMPID , EMPNAME, EMPSAL, EMPDOB, DEPTID
					
					
				DEPARTMENT 
					DEPTID, DEPTNAME
						
						
				-- EMPLOYEE TABLE IS DEPENDENT ON DEPARTMENT TABLE ---

				-- EMPLOYEE : CHILD
				
				-- DEPARTMENT : PARENT 
						
			3) ** WE NEED TO HAVE PARENT TABLE FIRST 
				 ** THEN WE CREATE CHILD TABLE 
				 
			
			RULES : 
				1) TWO TABLE ARE IN PARENT CHILD RELATIONSHIP 
				2) COLUMN WHICH REFERED IN THE PARENT TABLE MUST BE A PRIMARY KEY 
				3) FOREIGN CONSTRAINT WILL BE APPLIED TO THE CHILD TABLE 
				 
				 
				 
			PAREANT TABLE :-

				CREATE TABLE DEPARTMENTS
				(
				DEPTID INT PRIMARY KEY,
				DEPTNAME VARCHAR(20)
				);
				
				INSERT INTO DEPARTMENTS VALUES(10,'HR');
				INSERT INTO DEPARTMENTS VALUES(20,'MARKETING');
				INSERT INTO DEPARTMENTS VALUES(30,'FINANCE');
				INSERT INTO DEPARTMENTS VALUES(40,'PRODUCT');
				SYNTAX :
					
	FOREIGN KEY(COLUMN NAME OF CHILD TABLE) 
						REFERENCES PARENTTABLENAME(PARENT TABLE COLUMN NAME);
						
				CREATE TABLE EMPLOYEES
				(
				EMPID INT PRIMARY KEY,
				EMPNAME VARCHAR(20),
				EMPSAL INT,
				DEPTID INT,
				FOREIGN KEY(DEPTID) REFERENCES DEPARTMENTS(DEPTID)
				);
				
		INSERT INTO EMPLOYEES VALUES(101,'RAHUL',8979,10);	
		INSERT INTO EMPLOYEES VALUES(102,'SUNITA',8979,NULL);	
			** USAGE - RESTRICTION 
			
			SYSTEM WILL NOT ALLOW END USER TO INSERT ANY VALUE IN THE COLUMN OF CHILD TABLE WHICH DOESN'T EXIT IN THE PARENT TABLE 
			
			* EVERY EMPLOYEE HAVE DEPAARTMENT ID WHICH MUST PRESENT IN THE DEPARTMENT TABLE 
			* NULL IN THE FOREIGN COLUM IS ALLOWED
			
	****************************************************************		
		NAME TO THE CONSTRAINT :-

			CREATE TABLE EMPLOYEES
				(
				EMPID INT PRIMARY KEY,
				EMPNAME VARCHAR(20),
				EMPSAL INT,
				DEPTID INT,
				CONTRAINT EMPLOYEE_FK FOREIGN KEY(DEPTID) REFERENCES DEPARTMENTS(DEPTID)
				);
			
-----------------------------------------------------------------------

SIMILAR TERM : 
		COMPOSITE PRIMARY 
		ALSO DEFINE COMPOSITE FOREIGN KEY 
		
		* PARENT AND CHILD TABLES
		* NUMBER OF COLUMNS INVOLVED IN THE FOREIGN KEY 
		MUST PRESENT IN THE BOTH THE TABLE 
		* PARENT TABLE MUST HAVE A COMPOSITE PRIMARY KEY 
		* CHILD TABLE REFER TO THE PARENT TABLE COLUMNS
		
		
		CREATE TABLE DEPARTMENTC
		(
		DEPTNAME VARCHAR(20),
		DEPARTMENTL VARCHAR(20),
		DEPARTMENTCITY VARCHAR(20),
		PRIMARY KEY(DEPTNAME,DEPARTMENTL)
		);
		
		INSERT INTO DEPARTMENTC VALUES('HR','VIMANNAGAR','PUNE');
		INSERT INTO DEPARTMENTC VALUES('HR','WAKAD','PUNE');
		INSERT INTO DEPARTMENTC VALUES('MARKETING','WAKAD','PUNE');
		
		CREATE TABLE EMPLOYEEC
		(
		EMPID INT PRIMARY KEY,
		EMPNAME VARCHAR(20),
		DEPTN VARCHAR(20),
		DEPTL VARCHAR(20),
		CONSTRAINT EMPLOYEEC_FK FOREIGN KEY(DEPTN,DEPTL) 
				REFERENCES DEPARTMENTC(DEPTNAME,DEPARTMENTL)
		);
		
		INSERT INTO EMPLOYEEC VALUES(101,'RAHUL','HR','MEERUT');

----------------------------------------------------------------------

FOREIGN KEY CONSTRAINTS 

	RULES 
			PARENT AND CHILD TABLE 
			PARENT TABLE MUST HAVE PRIMARY KEY 
			CHILD TABLE REFERS PARENT TABLE 
			CONPOSITE FOREIGN KEY , WE MUST HAVE COMPOSITE PRIMARY KEY 
			
	**
		WHAT WILL HAPPEN WHEN YOU REMOVE THE DATA FROM CHILD AND PARENT TABLE 

		* END USER CAN DELETE DATA FROM CHILD TABLE AS THIS TABLE DOESN'T HAVE ANY DEPENDENCY 
		*END USER CAN NOT DELETE DATA FROM PARENT IF THE REFERENCES EXIST IN THE CHILD TABLE 
		
		TO DELETE A PERTICULAR RECORDS 
		
			SYNTAX : 
				DELETE FROM TABLENAME WHERE CONDITION;
				
				DELETE FROM 
				
====================================================================

MAY BE A SCENARIO - THAT WE HAVE MULIPLE RECORDS EXIST IN THE CHILD TABLE 	

		100 EMPLOYEES BELONGS TO DEPARTMENT 10 
		
			* TWO WAYS TO DELETE DEPARTMENT 10 
				1) UPDATE EMPLOYEES WORKING IN DEPARTMENT 10 WITH NULL VALUE 
				2) DELETE ALL THE EMPLOYEES WHICH BELONGS TO DEPARTMENT 10 
				
-------- REQUIRED THIS TO BE MANAGE MY THE SYSTEM AUTOMATICALLY 

** CASCADING 

			* ON DELETE SET NULL 
				WHEN YOU ARE DELETING DATA FROM PARENT TABLE 
					UPDATE THE CHILD REFERENCES WITH NULL VALUE 

EMP 						DEPT (DELETE)

101 RAHUL 10(NULL)			10   HR  --- DELTING THIS RECORD 
101 RAHUL 20				20   MARKETING
			

			* ON DELETE CASCADE 
				WHEN YOU ARE DELETING DATA FROM PARENT TABLE 	
					DELETE THE COMPLETE REFERENCES FROM THE CHILD TABLE 
					
EMP 						DEPT (DELETE)

							10   HR  --- DELTING THIS RECORD 
101 RAHUL 20				20   MARKETING	
	
			* ON UPDATE CASCADE 
				WHEN YOU UPDATE DATA IN THE PARENT TABLE 
					JUST UPDATE THE CHILD TABLE WITH THE SAME VALUE 
					
EMP 						DEPT (DELETE)

101 RAHUL 10(30)			10(30)   HR  --- UPDATING THIS RECORD 
101 RAHUL 20				20   MARKETING			

SYNTAX : 

	FOREIGN KEY(CHILD COLUMN NAME) REFERENCES PARENT TABLE(PARENT TABLE COLUMN NAME) ON DELETE CASCADE 
	
	
	
EXAMPLE OF ON DELTE SET NULL 

				CREATE TABLE DEPARTMENTSETNULL
				(
				DEPTID INT PRIMARY KEY,
				DEPTNAME VARCHAR(20)
				);
				
				INSERT INTO DEPARTMENTSETNULL VALUES(10,'HR');
				INSERT INTO DEPARTMENTSETNULL VALUES(20,'MARKETING');
				INSERT INTO DEPARTMENTSETNULL VALUES(30,'FINANCE');
				INSERT INTO DEPARTMENTSETNULL VALUES(40,'PRODUCT');
	
						
				CREATE TABLE EMPLOYEESSETNULL
				(
				EMPID INT PRIMARY KEY,
				EMPNAME VARCHAR(20),
				EMPSAL INT,
				DEPTID INT,
				FOREIGN KEY(DEPTID) REFERENCES DEPARTMENTSETNULL(DEPTID)
				ON DELETE SET NULL
				);
				
		INSERT INTO EMPLOYEESSETNULL VALUES(101,'RAHUL',8979,10);	
		INSERT INTO EMPLOYEESSETNULL VALUES(102,'SUNITA',8979,20);	
		INSERT INTO EMPLOYEESSETNULL VALUES(103,'NIKITA',890000,10);
	

EXAMPLE FOR ON DELETE CASCADE 

				CREATE TABLE DEPARTMENTCASCADE
				(
				DEPTID INT PRIMARY KEY,
				DEPTNAME VARCHAR(20)
				);
				
				INSERT INTO DEPARTMENTCASCADE VALUES(10,'HR');
				INSERT INTO DEPARTMENTCASCADE VALUES(20,'MARKETING');
				INSERT INTO DEPARTMENTCASCADE VALUES(30,'FINANCE');
				INSERT INTO DEPARTMENTCASCADE VALUES(40,'PRODUCT');
	
						
				CREATE TABLE EMPLOYEESCASCADE
				(
				EMPID INT PRIMARY KEY,
				EMPNAME VARCHAR(20),
				EMPSAL INT,
				DEPTID INT,
				FOREIGN KEY(DEPTID) REFERENCES DEPARTMENTCASCADE(DEPTID)
				ON DELETE CASCADE
				);
				
		INSERT INTO EMPLOYEESCASCADE VALUES(101,'RAHUL',8979,10);	
		INSERT INTO EMPLOYEESCASCADE VALUES(102,'SUNITA',8979,20);	
		INSERT INTO EMPLOYEESCASCADE VALUES(103,'NIKITA',890000,10);


EXAMPLE FOR ON UPDATE CASCADE 

				CREATE TABLE DEPARTMENTUCASCADE
				(
				DEPTID INT PRIMARY KEY,
				DEPTNAME VARCHAR(20)
				);
				
				INSERT INTO DEPARTMENTUCASCADE VALUES(10,'HR');
				INSERT INTO DEPARTMENTUCASCADE VALUES(20,'MARKETING');
				INSERT INTO DEPARTMENTUCASCADE VALUES(30,'FINANCE');
				INSERT INTO DEPARTMENTUCASCADE VALUES(40,'PRODUCT');
	
						
				CREATE TABLE EMPLOYEESUCASCADE
				(
				EMPID INT PRIMARY KEY,
				EMPNAME VARCHAR(20),
				EMPSAL INT,
				DEPTID INT,
				FOREIGN KEY(DEPTID) REFERENCES DEPARTMENTUCASCADE(DEPTID)
				ON UPDATE CASCADE
				);
				
		INSERT INTO EMPLOYEESUCASCADE VALUES(101,'RAHUL',8979,10);	
		INSERT INTO EMPLOYEESUCASCADE VALUES(102,'SUNITA',8979,20);	
		INSERT INTO EMPLOYEESUCASCADE VALUES(103,'NIKITA',890000,10);

==================================================================

5) DEFAULT 

			WHICH ALLOWS TO INSERT DEFAULT VALUE TO THE PERTICULAR COLUMN WHEN THE VALUE IS NOT PROVIDED
			
			CREATE TABLE EMP 
			(
			EMPID INT PRIMARY KEY,
			EMPNAME VARCHAR(200),
			DEPTID INT DEFAULT 10
			);
			
			** NOT PROVIDED - ASSIGN DEFAULT VALUE 
		
			MULTIPLE 
				TABLE 
					ADDEDBY
					ADDEDDATETIME
					UPDATEDBY
					UPDATEDDATETIME 
					
			CREATE TABLE EMP1 
			(
			EMPID INT PRIMARY KEY,
			EMPNAME VARCHAR(200),
			DEPTID INT DEFAULT 10,
			ADDEDDATETIME DATETIME DEFAULT NOW()
			);		
					

6) CHECK 
			THIS CONSTRAINT RESTRICT USER TO INSERT OR UPDATE VALUES BASED ON THE CONDITION PROVIDED 
			 
			 CHECK ALWAYS COMES WITH CONDITION
			 
			 EXAMPLE 
				DO NOT WANT ANYBODY INSERT EMPLOYEE SALARY > 70000
				
			SALARY INT CHECK SALARY < 70000
			
			IF SALARY < 70000
			THEN 
			 ALLOWS INSERT OT UPDATING 
			 ELSE 
			 THROWS ERROR (BREAKING CONSTRINT)
			 END 
			 
			 CREATE TABLE EMPCHECK
			 (
			 EMPID INT,
			 EMPNAME VARCHAR(20),
			 EMPSAL INT CHECK(EMPSAL < 70000)
			 );
			 
-------------------------------------------------------------------

7) AUTO_INCREMENT 
			
				ITS BEHAVES LIKE A SEQUENE 
					WHOSE VALUE START FROM 
						1 AND INCREMENTED BY ONE
						
					--- IS USED ON CERTAIN COLUMN WHERE I WANT VALUE TO BE AUTOMATICALLY INSERT WITHOUT MISSING ANY VALUE 
					
					HOW THIS WORKS 
					
					* INSERT A RECORD 
					* IT PICS THE MAXIMUM VALUE OF THAT COLUMN 
					* MAXIMUM VALUE + 1
					* INSERT THAT RECORD WITH THAT VALUE 
					
					EMPLOYEE ID = 106
					INSERT NEW RECORD 
							IT AUTOMATICALLY ENTER 107 
							 WHEN THE VALUE NOT PROVIDED 
					
					* COLUMN WHICH WE ARE MENTIONING AS AUTO_INCREMENT 
							NEED TO BE A PRIMARY KEY 
					
					
					CREATE TABLE EMPAUTOINREMENT
					(
					EMPID INT PRIMARY KEY AUTO_INCREMENT,
					EMPNAME VARCHAR(20)
					);
					
					
		----- TWO WAYS TO INITIALIZE THE VALUES OF THE TABLE 

				* INSERT ONE RECORD BY YOUR SELF WITH THAT PERTICULAR VALUE 
				* ASSIGN THE VALUE TO AUTO_INCREMENT 
				
				ALTER TABLE EMPAUTOINREMENT AUTO_INCREMENT = 1000;
				
---------------------------------------------------------------------

		RESTRICTION WILL BE PROVIDED TO THE COLUMNS 
		
					PRIMARY KEY 
					UNIQUE 
					NOT NULL 
					FOREIGN KEY 
					DEFAULT 
					CHECK 
					AUTO_INCREMENT 
					
		ENUM CONSTRAINT 
				ENUM : SET OF VALUES 
					
					
			CREATE TABLE EMPENUM
			(
			ID INT,
			NAME VARCHAR(20),
			GENDER ENUM('M','F','O')
			);
			 
-----------------VARIOUS TYPE OF CONSTAINTS CAN BE APPLIED ON THE TABLE FOR STOPING END USER TO PERFORM CERTAIN ACTION BASED ON THE VALUES -----------------------------------------------------------------------

			 CREATE TABLE TABLENAME 
			 (
			 COLUMNNAME DATATYPE CONSTRAINTS,
			 COLUMN2 DATATYPE CONSTRAINTS
			 ...
			 ..
			 ..
			 
			 );
			 
-------------------------------------------------------------------------

SECOND COMMAND IN THE DDL IS ALTER 

		** WE ARE INTERATING WITH THE STRUCTURE NOT WITH THE DATA 
		
		LETS FEW THINGS THAT WE EXPECT FROM ALTER 
		
				** MODIFY THE EXISTING STRUCTURE OF THE TABLE 
				
				1) NEW COLUMNS 
				2) DROP EXISTING COLUMN 
				3) CHANGE THE DATATYPE OF THE COLUMN 
				4) CHANGE THE SIZE OF THE DATATYPE 
				5) NEED TO CHANGE THE NAME OF THE COLUMN 
				6) NEED ADD CONSTRAINTS TO THE EXISTING COLUMN 
				7) NEED TO RENAME THE TABLE NAME 
				
				
		* NEW COLUMN 
		
		SYNTAX : 
			ALTER TABLE TABLENAME ADD COLUMNNAME DATATYPE;
			
			ALTER TABLE EMPENUM ADD SALARY INT;
			* CREATES NEW COLUMN IN THE TABLE EMPENUM
			* INSERT NULL AS AN VALUE 
			
		* REMOVE COLUMN FROM THE TABLE 
			
			SYNTAX : 
			ALTER TABLE TABLENAME DROP COLUMNNAME;
			
			ALTER TABLE EMPENUM DROP SALARY;

		* CHANGE THE EXISTING DATATYPE OR SIZING 

			SYNTAX : 
			
			ALTER TABLE TABLENAME MODIFY COLUMN DATATYPE;
			
			ALTER TABLE EMPENUM MODIFY NAME VARCHAR(30);
		
				
		* DATATYPE CHANGE ONLY ALLOWED 
			EITHER THERE IS NO VALUE IN THAT COLUMN 
			OR BASED ON THE DATATYPE IT FIT WITH THE REQUIRENMENT 
				STRING CAN NOT BE CHANGE TO INT 
				INT CAN BE CHANGE TO STRING 
				DATE CAN NOT BE CHANGE TO INT 
				INT CAN BE CHANGE TO FLOAT 
				INT CAN BE CHANGE TO DOUBLE 
				
		* CHANGE THE NAME OF THE COLUMN 

			SYNTAX : 
				ALTER TABLE TABLENAME CHANGE OLDNAME NEWNAME DATATYPE;
				
			ALTER TABLE EMPENUM CHANGE ID EMPID INT;	

		* NEED TO ADD ANY CONSTRAINTS 
			PRIMARY KEY ON EMPID COLUMN 
			
			SYNTAX : 
				ALTER TABLE TABLENAME ADD PRIMARY KEY(COLUMNNAME);
				
			ALTER TABLE EMPENUM ADD PRIMARY KEY(EMPID);	

				CAN NOT ALTER ANY COLUMN WITH CONSTRAINTS 
					IF THE COLUMN VALUE NOT SATISFYING THE RULES OF THE CONSTRAINTS 
					
			ALTER TABLE EMPENUM MODIFY GENDER CHAR(1) NOT NULL;	

			ALTER TABLE TABLENAME ADD FOREIGN KEY(COLUMNNAME) REFERECES PARENTTABLENAME(PARENTCOLUMNNAME);
			
			
			REMOVE NOT NULL CONSTRAINT :-
			
				ALTER TABLE EMPENUM MODIFY GENDER CHAR(1);
				
			ALTER TABLE EMPENUM DROP PRIMARY KEY;
			
			ALTER TABLE EMPENUM DROP CONSTRAINT CONSTRAINT_NAME;
			
			
	******* RENAME THE TABLENAME 
		
				ALTER TABLE EMPENUM RENAME TO EMPNEWNAME;
			

-------------------------------------------------------------------------

3) DROP :
		* DROP COMMAND IS USED TO DROP THE COMPLETE TABLE FROM THE DATABASE WITH DATA 
		* RESTRICTION : TABLE WHICH WE ARE DROPING IS ALREADY HAVING RELATION SHIP OR DEPENCY ON THE OTHER TABLE 
			THEY SYSTEM WILL NOT ALLOW TO DROP THAT PERTICULAR TABLE 
			
			
		DROP TABLE TABLENAME ;

		DROP DATABASE DATABASENAME;
		
		DROP TABLE EMPNEWNAME;
			
			
			
***************
************
*******
			DDL COMMANDS ARE AUTOCOMMIT IN NATURE ****************
													************
														**********
		
			
		CLIENT MACHINE 
				STANDARD QUERY LANGUAGE 
					SERVER 
						QUERY PROCESSING 
						
	QUERY PROCESSING :
			
				DATABASE FOR EVERY USER 
					CREATE ON SESSION 
							SESSIONID 
				ALONG WITH SESSIONID 
					ALSO CREATED ONE TEMPRORAY MEMORY 
					
				QUERY PROCESSING HAPPEING - IT HAPPENING IN TEMP MEMORY 
					THEN IT THOWS EITHER ON THE CLIENT MACHINE 
					OR TOWARDS THE DATABASE
					
					
		DDL COMMANDS - HITS YOUR DATABASE DIRECLTY 
						THESE COMMANDS NEVER PROCESSED IN THE TEMP MEMORY 
						
		IT DIRECTLY HAMPERING YOUR PHYSICAL LOCATION OF THE DATABASE 
		
		*** YOU CAN NOT REVERT THE CHANGES PERFORMED BY THE DDL COMMANDS
		
		
-------------------------------------------

DML COMMANDS : 
			
				ARE NOT AUTOCOMMIT IN NATURE 
					
					
					

** COMMIT 
		USED TO PUSH THE DATA FROM TEMP MEORY TO THE PHYSICAL LOCATION OF THE DATABASE 
		
** ROLLBACK : 
		USED TO REOLLBACK THE CHANGE NOT MOVED TO THE DATABASE 
			DATA IS IN TEMP MEMORY CAN BE ROLLEDBACK
			
					
----------------------------------------------------------------------

DML : 

	INSERT 
		USED TO HAVE A NEW RECORD IN THE TABLE 
		
		
	UPDATE 
		USED TO UPDATE THE EXISTING VALUE OF THE ROW
	
	DELETE 
		DELETE THE ROWS FROM THE TABLE 
		

DQL : SELECT