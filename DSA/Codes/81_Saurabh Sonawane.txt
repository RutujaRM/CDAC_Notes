Roll No : 81.
Name : Saurabh Sonawane.

*************************************************************************************

/*Q1.Implement employee record consisting

(1) ID (2) Name (3) salary using linked list
1) add new record
2) search
3) delete specific record.

*/


import java.util.Scanner;

class Employee
{
	int id;
	String Name;
	double salary;
	Employee next;
	Employee(int id,String Name,double salary)
	{
		this.id = id;
		this.Name = Name;
		this.salary = salary;
		next = null;
	}
}


public class EmployeeManagment {
Employee root; 
	
	void initList()
	{
		root = null;
	}
	void insertLeft(int id,String Name,double salary)
	{
		Employee n = new Employee(id,Name,salary);
		if(root == null)
		{
			root = n;
		}
		else
		{
			n.next = root;  
			root = n; 
		}
	}
	
	void deleteLeft()
	{
		Employee t;
		if(root == null)
		{
			System.out.println("LinkedList is empty");
		}
		else
		{
			t = root;
			root = t.next;
			System.out.println("Deleted Node is "+t.id +" "+t.Name+" "+t.salary);
		}
	}
	void insertRight(int id,String Name,double salary)
	{
		Employee n = new Employee(id,Name,salary);
		
		if(root == null)
		{
			root = n;
		}
		else
		{
			Employee t = root;
			while(t.next != null)
			{
				t = t.next;
			}
			t.next = n;
		}
	}
	
	void deleteRight()
	{
		
		if(root == null)
		{
			System.out.println("LinkedList is empty");
		}
		else
		{
			Employee t = root;
			
			Employee t2 = root;
			while(t.next != null)
			{
				t2 = t; 
				t = t.next; 
			}
			System.out.println("Deleted Node is "+t.id +" "+t.Name+" "+t.salary);
			t2.next = null;
		}
	}
	
	void printList()
	{
		
		if(root == null)
		{
			System.out.println("\tLinkedList is empty");
		}
		else
		{
			Employee t = root;
			 //t.next != null
			while(t != null)
			{
				System.out.println("\tID"+"\tNAME"+"\tSALARY");
				System.out.print("\t"+t.id +"\t"+t.Name+"\t"+t.salary+"\n");
                System.out.println();
				t = t.next;
			}
			
			
		}
	}
	
	void searchList(int key)
	{
		int pos = 0;
		if(root == null)
		{
			System.out.println("LinkedList is empty");
		}
		else
		{
			Employee t = root;
			while(t != null) 
			{
				pos++;
				if(t.id == key)
				{
					break;
				}
				t = t.next;
			}
			if(t == null)
			{
				System.out.println(key+" not found");
			}
			else
			{
				System.out.println("found element at "+pos+" position from root");
			}
		}
}
	public static void main(String[] args) {
		
		EmployeeManagment obj= new EmployeeManagment();
		Scanner sc = new Scanner(System.in);
		int ch,id;
		String Name;
		double salary;
		obj.initList();
		do
		{
            System.out.println("\t********** MAIN MENU ***********");
            System.out.println();
			System.out.println("\t1.Insert left\n"
					+ "\t2..Insert Right\n"
					+ "\t3.Delete left\n"
					+ "\t4.Delete Right\n"
					+ "\t5.Print list\n"
					+ "\t6.Search\n"
					+ "\t8.Exit\n");
			ch = sc.nextInt();
			switch(ch)
			{
			case 1:
				System.out.println("\tEnter Emplyoee ID : ");
				id = sc.nextInt();
				sc.nextLine();
				System.out.println("\tEnter Name : ");
				Name = sc.nextLine();
				System.out.println("\tEnter Salary : ");
				salary = sc.nextDouble();
				obj.insertLeft(id,Name,salary);
				break;
				
			case 2:
				System.out.println("\tEnter ID :");
				id = sc.nextInt();
				sc.nextLine();
				System.out.println("\tEnter Name : ");
				Name = sc.nextLine();
				System.out.println("\tEnter Salary :");
				salary = sc.nextDouble();
				obj.insertRight(id,Name,salary);
				break;
				
			case 3:
				obj.deleteLeft();
				break;
				
			case 4:
				obj.deleteRight();
				break;
				
			case 5:
				obj.printList();
				break;
				
			case 6:
				System.out.println("\tEnter ID to Search");
				id = sc.nextInt();
				obj.searchList(id);
				break;
				
			case 8:
				System.out.println("\tEXITING.......Thanks For Using Code By Saurabh Sonawane.");
				break;
				
			default:
				System.out.println("\tInvalid Choice");
                System.out.println("\tSelect Correct Option.");
			}
		}while(ch != 8);
	}

}



OUTPUT :- 

        ********** MAIN MENU ***********

        1.Insert left
        2..Insert Right
        3.Delete left
        4.Delete Right
        5.Print list
        6.Search
        8.Exit

1
        Enter Emplyoee ID : 
01
        Enter Name : 
Saurabh
        Enter Salary : 
2000
        ********** MAIN MENU ***********

        1.Insert left
        2..Insert Right
        3.Delete left
        4.Delete Right
        5.Print list
        6.Search
        8.Exit

1
        Enter Emplyoee ID : 
02
        Enter Name : 
Sangram
        Enter Salary : 
3000
        ********** MAIN MENU ***********

        1.Insert left
        2..Insert Right
        3.Delete left
        4.Delete Right
        5.Print list
        6.Search
        8.Exit

1
        Enter Emplyoee ID : 
03
        Enter Name : 
Niraj
        Enter Salary : 
4000
        ********** MAIN MENU ***********

        1.Insert left
        2..Insert Right
        3.Delete left
        4.Delete Right
        5.Print list
        6.Search
        8.Exit

1
        Enter Emplyoee ID : 
04
        Enter Name : 
Pramod
        Enter Salary : 
5000
        ********** MAIN MENU ***********

        1.Insert left
        2..Insert Right
        3.Delete left
        4.Delete Right
        5.Print list
        6.Search
        8.Exit

1
        Enter Emplyoee ID : 
05
        Enter Name : 
Rohit
        Enter Salary : 
7000 
        ********** MAIN MENU ***********

        1.Insert left
        2..Insert Right
        3.Delete left
        4.Delete Right
        5.Print list
        6.Search
        8.Exit

5
        ID      NAME    SALARY
        5       Rohit   7000.0

        ID      NAME    SALARY
        4       Pramod  5000.0

        ID      NAME    SALARY
        3       Niraj   4000.0

        ID      NAME    SALARY
        2       Sangram 3000.0

        ID      NAME    SALARY
        1       Saurabh 2000.0

******************************************************************************
******************************************************************************






// Q2. Double linked list.


import java.util.Scanner;

class Node
{
	int data;
	Node next,prev;
	Node(int data)
	{
		this.data=data;
		this.next=null;
		this.prev=null;
	}
	
}

public class  DoublyLinkedList{
	Node head,temp,t;
	void init()
	{
		head=null;
	}
	
	
	void search(int key)
	{
		int count=0,flag=0;
		if(head==null)
			System.out.println("ll is empty");
		else
		{
			temp=head;
			while(temp!=null)
			{
				count++;
				if(key==temp.data)
				{
					flag=1;
					break;
				}
				temp=temp.next;
			}
		}
		if(head==null)
		{
			System.out.println("not found");
		}
		if(flag==1)
		{
			System.out.println("found="+key+"count="+count);
		}
		else
		{
			System.out.println("not found");
		}
	}
	
	void insertleft(int data)
	{
		Node newNode=new Node(data);
		if(head==null)
		{
			head=newNode;
			
		}
		else
		{
			newNode.next=head;
			head.prev=newNode;
			head=newNode;
			
		}
	}
	
	void insertRight(int data)
	{
		Node newNode=new Node(data);
		if(head==null)
		{
			head=newNode;
		}
		else
		{
			temp=head;
			while(temp.next!=null)
			{
				temp=temp.next;
			}
			temp.next=newNode;
			newNode.prev=temp;
		}
	}
	
	void deleteleft()
	{
		if(head==null)
			System.out.println("LL is empty");
		else
		{
			temp=head;
			head=temp.next;
			head.prev=null;
			System.out.println("deleted Node="+temp.data);
			
		}
	}
	void deleteright()
	{
		if(head==null)
		{
			System.out.println("linklist is empty");
		}
		else
			temp=head;
		t=head;
		while(temp.next!=null)
		{
			//t=temp;
			temp=temp.next;
			
			
		}
		System.out.println("deleted data"+temp.data);
		t=temp.prev;
		t.next=null;
	}
	
	void print()
	{
		if(head==null)
		{
			System.out.println("ll is empty");
		}
		else
		{
			temp=head;
			
			while(temp.next!=null)
			{
				//System.out.print(temp.data+" ");
				temp=temp.next;
			}
			
			while(temp!=null)
			{
				System.out.print(temp.data+" ");
				temp=temp.prev;
			}
		}
	}
	
	

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		DoublyLinkedList a1=new DoublyLinkedList();
		a1.init();
		int ch,no,key=0;
		do
		{
            System.out.println();
            System.out.println("\t************ MAIN MENU ****************");
            System.out.println();
			System.out.println("\n1.Insert left.\n2.Insert Right. \n3.Delete Left.\n4.Delete Right.\n5.Print.\n6.Search\n7.Exit");
            System.out.println();
			System.out.println("Enter Your Choice : ");
			ch=sc.nextInt();
			switch(ch)
			{
			case 1:
				System.out.println("enter element");
				no=sc.nextInt();
				a1.insertleft(no);
				break;
				
			case 2:
				System.out.println("enter element");
				no=sc.nextInt();
				a1. insertRight(no);
				break;	
				
				
			case 3:
				a1.deleteleft();
				break;
				
			case 4:
				a1.deleteright();
				break;
				
			case 5:
            System.out.println();
				a1.print();
                System.out.println();
				break;
                case 6:
                a1.search(key);
                break;
		
				case 0:
                System.out.println("EXITING... Thanks For Using Code By Saurabh Sonawane.");
                break;
                default:
                System.out.println("Invalid Choice Selected.");
                System.out.println("Please Enter Right Choice.");
			}
			
			
		}while(ch!=7);
		
		sc.close();
		
	}

}


OUTPUT :- 


        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right. 
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice : 
1
enter element
12

        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right. 
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice : 
1
enter element
32

        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right.
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice :
1
enter element
54

        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right.
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice :
1
enter element
67

        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right.
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice :
3
deleted Node=67

        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right.
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice :
2
enter element
45

        ************ MAIN MENU ****************


1.Insert left.
2.Insert Right.
3.Delete Left.
4.Delete Right.
5.Print.
6.Search
7.Exit

Enter Your Choice :
5

45 12 32 54


*******************************************************************************
*******************************************************************************



// Q3. Implement linked list sorting function.

import java.util.Scanner;

import javax.swing.plaf.synth.SynthOptionPaneUI;

class Node {
    Node root;

    int data;
    Node next;;

    public Node(int data) {
        this.data = data;
        next = null;
    }
}

class LinkedListSorting {

    int n;
    Node root;

    void init() {
        root = null;
    }

    void insertleft(int data) {
        Node n = new Node(data);
        if (root == null) {
            root = n;

        } else {
            n.next = root;
            root = n;

        }
    }

    void insertRight(int data) {
        Node n = new Node(data);
        Node temp;
        if (root == null) {
            root = n;
        } else {
            temp = root;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = n;
        }
    }

    void deleteleft() {
        Node temp;
        if (root == null)
            System.out.println("LL is empty");
        else {
            temp = root;
            root = temp.next;
            System.out.println("deleted node=" + temp.data);

        }
    }

    void deleteright() {
        Node temp, t;
        if (root == null) {
            System.out.println("linklist is empty");
        } else
            t = root;
        temp = root;

        while (temp.next != null) {
            temp = temp.next;
            t = temp;

            System.out.println("deleted data" + temp.data);
            t.next = null;
        }
    }

    void print() {
        Node temp;
        if (root == null) {
            System.out.println("ll is empty");
        } else {
            temp = root;
            while (temp != null) {
                System.out.print(temp.data + " ");
                temp = temp.next;
            }
        }
    }

    void sorting()
	{
		
		if(root == null)
		{
			System.out.println("LinkedList is Empty.");
		}
		else
		{
			Node i = root;
			Node j = root;
			int t;
			while(i != null) 
			{
				j = i.next;
				while(j != null)
				{
					if(i.data > j.data)
					{
						t = i.data;
						i.data = j.data;
						j.data = t;
					}
					j = j.next;
				}
				i = i.next;
			}
			
		}
	}

    public static void main(String args[]) {

        LinkedListSorting obj = new LinkedListSorting();
        obj.init();
        Scanner sc = new Scanner(System.in);
        int ch = 0;
        do {

            System.out.println();

            System.out.println("\t*************** MAIN MENU***************");

            System.out.println("\n1.Insert Right.\n2.Insert Left.\n3.Delete Right.\n4.Delete Left.\n5.Print.\n6.Sort.");
            System.out.println();
            System.out.println("Enter Your Choice : ");
            ch = sc.nextInt();
            

            switch (ch) {
                case 1:
                    System.out.println("Enter Element : ");
                    int n=sc.nextInt();
                    obj.insertRight(n);
                    System.out.println("Inserted :"+n);
                    break;

                case 2:

                System.out.println("Enter Element : ");
                n=sc.nextInt();
                    obj.insertleft(n);
                    System.out.println("Inserted : "+n);

                    break;
                    case 3:
                    obj.deleteright();
                    System.out.println("Deleted.");


                    break;
                    case 4:
                    obj.deleteleft();
                    System.out.println("Deleted.");
                    break;
                    case 5:
                    System.out.println();
                    obj.print();
                    System.out.println();
                    break;
                    case 6:
                    System.out.println("Before Sorting :");
                    
                    obj.print();
                    System.out.println();
                    System.out.println("After Sorting :");
                    obj.sorting();
                    obj.print();
                    
                    break;
                    case 0:
                    System.out.println("EXITING....Thanks for using Code By Saurabh Sonawane.");
                    break;

                default:
                    break;
            }

        } while (ch != 0);
sc.close();
    }

}

OUTPUT :-



        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice : 
1
Enter Element : 
23
Inserted :23

        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice : 
1
Enter Element : 
45
Inserted :45

        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice :
2
Enter Element : 
78
Inserted : 78

        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice :
1
Enter Element : 
12
Inserted :12

        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice :
2
Enter Element : 
98
Inserted : 98

        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice :
2
Enter Element : 
3
Enter Your Choice :
5

3 12 23 45 78 98 

        *************** MAIN MENU***************

1.Insert Right.
2.Insert Left.
3.Delete Right.
4.Delete Left.
5.Print.
6.Sort.

Enter Your Choice : 
6
Before Sorting :
3 12 23 45 78 98 
After Sorting :
3 12 23 45 78 98 


************************************************************************
************************************************************************






