Q.1 
Implement code to rotate data of a linear linked list for user given 'n' times.

import java.util.Scanner;

class Dnode
{
	int data;
	Dnode left,right;
	Dnode(int data)
	{
		this.data = data;
		left = right = null;
	}
}


public class DoublyLinkedList {
	Dnode root;

	void initList() {
		root = null;
	}

	
	void insertRight(int data) {
		Dnode n = new Dnode(data);

		if (root == null) {
			root = n;
		} else {
			Dnode t = root;
			while (t.right != null) {
				t = t.right;
			}
			t.right = n;
			n.left = t;
		}
	}

	

	void printReverseList() {

		if (root == null) {
			System.out.println("LinkedList is empty");
		} else {
			Dnode t = root;
			// t.next != null
			while (t.right != null) {
				t = t.right;
			}
			while (t != null) {
				System.out.println(t.data);
				t = t.left;
			} 
			// System.out.println(t.next.data);

		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DoublyLinkedList obj = new DoublyLinkedList();
		Scanner s = new Scanner(System.in);
		int ch, e;
		obj.initList();
		do {
			System.out.println("1.Insert Right\n" + "2.Print reverse list\n"  + "3.Exit\n");
			ch = s.nextInt();
			switch (ch) {
			case 1:
				System.out.println("enter element");
				e = s.nextInt();
				obj.insertRight(e);
				break;

			case 2:
				obj.printReverseList();
				break;
			
			case 3:
				System.out.println("bye bye");
				break;

			default:
				System.out.println("Invalid choice");
			}
		} while (ch != 3);
	}

}

//1.Insert Right
//2.Print reverse list
//3.Exit
//
//1 10 1 20 1 30 1 40
//enter element
//1.Insert Right
//2.Print reverse list
//3.Exit
//
//enter element
//1.Insert Right
//2.Print reverse list
//3.Exit
//
//enter element
//1.Insert Right
//2.Print reverse list
//3.Exit
//
//enter element
//1.Insert Right
//2.Print reverse list
//3.Exit
//
//2
//40
//30
//20
//10
//1.Insert Right
//2.Print reverse list
//3.Exit



Q.2
To enqueue an item into the queue, first move all elements from
the first stack to the second stack, push the item into the first stack, and
finally move all elements back to the first stack. This ensures that the new
item lies at the bottom of the stack and hence would be the last one to be
removed.

Q.3
To dequeue an item from the queue, return the top item from the
first stack.




//Java program to implement Queue using
//two stacks with costly enQueue()
import java.util.*;


class QUsingStack 
{
	static Stack<Integer> s1 = new Stack<Integer>();
	static Stack<Integer> s2 = new Stack<Integer>();

	static void enQueue(int x)
	{
		
		while (!s1.isEmpty())
		{
			s2.push(s1.pop());
			
		}

		
		s1.push(x);

		
		while (!s2.isEmpty())
		{
			s1.push(s2.pop());
			
		}
	}

	
	static int deQueue()
	{
		
		if (s1.isEmpty())
		{
			System.out.println("Q is Empty");
			System.exit(0);
		}

		
		int x = s1.peek();
		s1.pop();
		return x;
	}



public static void main(String[] args)
{
	QUsingStack obj = new QUsingStack ();
	Scanner s = new Scanner(System.in);
	int ch, e;
	
	do {
		System.out.println("1.EnQueue\n" + "2.DQueue\n"  + "3.Exit\n");
		ch = s.nextInt();
		switch (ch) {
		case 1:
			System.out.println("enter element");
			e = s.nextInt();
			obj.enQueue(e);
			break;

		case 2:
			System.out.println("Deqeued element is "+obj.deQueue());
			break;
		
		case 3:
			System.out.println("bye bye");
			break;

		default:
			System.out.println("Invalid choice");
		}
	} while (ch != 3);
}
}


//1.EnQueue
//2.DQueue
//3.Exit
//
//1
//enter element
//10
//1.EnQueue
//2.DQueue
//3.Exit
//
//1
//enter element
//20
//1.EnQueue
//2.DQueue
//3.Exit
//
//30
//Invalid choice
//1.EnQueue
//2.DQueue
//3.Exit
//
//1
//enter element
//30
//1.EnQueue
//2.DQueue
//3.Exit
//
//2
//Deqeued element is 10
//1.EnQueue
//2.DQueue
//3.Exit
//
//2
//Deqeued element is 20
//1.EnQueue
//2.DQueue
//3.Exit
//
//2
//Deqeued element is 30
//1.EnQueue
//2.DQueue
//3.Exit
//
//2
//Q is Empty
